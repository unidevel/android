package com.unidevel.softkeyenabler;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Properties;
import java.util.Set;

import android.content.Context;

import com.unidevel.util.FileUtil;
import com.unidevel.util.RootUtil;
import java.util.*;
import android.util.*;
/*****
# begin build properties
# autogenerated by buildinfo.sh
ro.build.id=JRO03L
ro.build.display.id=JRO03L
ro.build.version.incremental=JLB7.0
ro.build.version.sdk=16
ro.build.version.codename=REL
ro.build.version.release=4.1.1
ro.build.date=Wed Dec 26 17:19:35 CST 2012
ro.build.date.utc=1356513575
ro.build.type=user
ro.build.user=builder
ro.build.host=taishan
ro.build.tags=release-keys
ro.product.model=MI 2
ro.product.brand=Xiaomi
ro.product.name=aries
ro.product.device=aries
ro.product.board=MSM8960
ro.product.cpu.abi=armeabi-v7a
ro.product.cpu.abi2=armeabi
ro.product.manufacturer=Xiaomi
ro.product.locale.language=zh
ro.product.locale.region=CN
ro.wifi.channels=
ro.board.platform=msm8960
# ro.build.product is obsolete; use ro.product.device
ro.build.product=aries
# Do not try to parse ro.build.description or .fingerprint
ro.build.description=aries-user 4.1.1 JRO03L JLB7.0 release-keys
ro.build.fingerprint=Xiaomi/aries/aries:4.1.1/JRO03L/JLB7.0:user/release-keys
ro.build.characteristics=nosdcard
# end build properties
#
# system.prop for surf
#

rild.libpath=/system/lib/libril-qc-qmi-1.so
rild.libargs=-d /dev/smd0
persist.rild.nitz_plmn=
persist.rild.nitz_long_ons_0=
persist.rild.nitz_long_ons_1=
persist.rild.nitz_long_ons_2=
persist.rild.nitz_long_ons_3=
persist.rild.nitz_short_ons_0=
persist.rild.nitz_short_ons_1=
persist.rild.nitz_short_ons_2=
persist.rild.nitz_short_ons_3=
ril.subscription.types=RUIM
DEVICE_PROVISIONED=1
debug.sf.hw=1
debug.egl.hw=1
debug.composition.type=dyn
debug.mdpcomp.maxlayer=3
debug.mdpcomp.logs=0

ro.sf.lcd_density=320

# save modem ramdump to sdcard
persist.radio.parsedump=1
persist.radio.ramdump_sdcard=1
persist.radio.ramdump_num=3

#
# system props for the cne module
#
#persist.cne.bat.range.low.med=30
#persist.cne.bat.range.med.high=60
#persist.cne.loc.policy.op=/system/etc/OperatorPolicy.xml
#persist.cne.loc.policy.user=/system/etc/UserPolicy.xml
#persist.cne.bwbased.rat.sel=false
#persist.cne.snsr.based.rat.mgt=false
#persist.cne.bat.based.rat.mgt=false
#persist.cne.rat.acq.time.out=30000
#persist.cne.rat.acq.retry.tout=0
#persist.cne.feature=1

ro.hdmi.enable=true
lpa.decode=false
lpa.use-stagefright=true

#system props for the MM modules

media.stagefright.enable-player=true
media.stagefright.enable-http=true
media.stagefright.enable-aac=true
media.stagefright.enable-qcp=true
media.stagefright.enable-fma2dp=true
media.stagefright.enable-scan=true
mmp.enable.3g2=true

#
# system props for the data modules
#
ro.use_data_netmgrd=true

#system props for time-services
#persist.timed.enable=true

# System props for audio
persist.audio.fluence.mode=endfire
persist.audio.vr.enable=false
persist.audio.handset.mic=digital

# System prop to select audio resampler quality
af.resampler.quality=255
# System prop to select MPQAudioPlayer by default on mpq8064
mpq.audio.decode=true

#
# system prop for opengles version
#
# 131072 is decimal for 0x20000 to report version 2
ro.opengles.version=131072

#
# system property for Bluetooth Handsfree Profile version
#
ro.bluetooth.hfp.ver=1.6
#
#system prop for Bluetooth hci transport
ro.qualcomm.bt.hci_transport=smd
#
# system prop for requesting Master role in incoming Bluetooth connection.
#
ro.bluetooth.request.master=true
#
# system prop for Bluetooth Auto connect for remote initated connections
#
ro.bluetooth.remote.autoconnect=true
# system property for Bluetooth discoverability time out in seconds
# 0: Always discoverable
#debug.bt.discoverable_time=0

#system prop for switching gps driver to qmi
persist.gps.qmienabled=true

# System property for cabl
ro.qualcomm.cabl=0

# System property for csc
debug.csc.poll=0

# System props for telephony
# System prop to turn on CdmaLTEPhone always
# telephony.lteOnCdmaDevice=1

#
# System prop for sending transmit power request to RIL during WiFi hotspot on/off
#
ro.ril.transmitpower=true

#
#Simulate sdcard on /data/media
#
persist.fuse_sdcard=true
ro.hwui.text_cache_width=2048
ro.hwui.texture_cache_size=48

#
# Supports warmboot capabilities
#
ro.warmboot.capability=1

#snapdragon value add features
ro.qcom.audio.ssr=true

persist.sys.strictmode.disable=true
power.webview.DM=false

#enable cdrom installer
persist.service.cdrom.enable=1

#
# Haptic
#
ro.haptic.vibrate_ex.enabled=1
sys.haptic.long.weak=0,127,10,50,20,-50,10,0,10
sys.haptic.long.normal=0,127,10,80,20,-80,10,0,10
sys.haptic.long.strong=0,127,10,100,20,-100,10,0,10
sys.haptic.down.weak=0,127,10,50,10,-50,10,0,10
sys.haptic.down.normal=0,127,10,80,10,-80,10,0,10
sys.haptic.down.strong=0,127,10,120,10,-120,10,0,10
sys.haptic.up.weak=0,80,30,-50,10,0,10
sys.haptic.up.normal=0,100,30,-100,10,0,10
sys.haptic.up.strong=0,120,30,-120,10,0,10
sys.haptic.tap.weak=0,80,40,-5,5,0,10
sys.haptic.tap.normal=0,100,40,-5,5,0,10
sys.haptic.tap.strong=0,120,40,-5,5,0,10

# power mode
persist.sys.aries.power_profile=middle

# suspend mode capability
ro.warmboot.capability=true

# display preference
persist.sys.display_prefer=0
persist.sys.display_ce=0

#
# ADDITIONAL_BUILD_PROPERTIES
#
keyguard.no_require_sim=true
ro.com.android.dataroaming=true
ro.com.android.dateformat=MM-dd-yyyy
ro.config.ringtone=MI.ogg
ro.config.notification_sound=FadeIn.ogg
ro.config.alarm_alert=GoodMorning.ogg
ro.config.sms_received_sound=FadeIn.ogg
ro.config.sms_delivered_sound=MessageComplete.ogg
ro.carrier=unknown
persist.sys.mitalk.enable=true
ro.vendor.extension_library=/system/lib/libqc-opt.so
dalvik.vm.heapstartsize=8m
dalvik.vm.heapgrowthlimit=96m
dalvik.vm.heapsize=384m
dalvik.vm.heaputilization=0.25
dalvik.vm.heapidealfree=8388608
dalvik.vm.heapconcurrentstart=2097152
net.bt.name=Android
dalvik.vm.stack-trace-file=/data/anr/traces.txt
 *****/
public class BuildPropFile {
	static final String PROP_PATH = "/system/build.prop";
	static final String PROP_NAME = "build.prop";
	static final String TEMP_PROP_NAME = "build.prop.new";
	Properties properties;
	Set<String> keys;
	Context context;
	public BuildPropFile(Context context){
		this.properties = new Properties();
		this.keys = new HashSet<String>();
		this.context = context;
	}
	
	public void load() throws IOException {
		File file = new File(PROP_PATH);
		Properties properties = new Properties();
		properties.load(new FileInputStream(file));
		this.properties = properties;
	}
	
	public boolean hasBackup(){
		File filesDir = this.context.getFilesDir();
		File destFile = new File(filesDir, PROP_NAME);
		return destFile.exists();		
	}
	
	public void backup() throws IOException {
		File filesDir = this.context.getFilesDir();
		File srcFile = new File(PROP_PATH);
		File destFile = new File(filesDir, PROP_NAME);
		if ( !destFile.exists())
		{
			FileUtil.copy(srcFile, destFile);
		}
	}
	
	public boolean makeUpdate(){
		return true;
	}
	
	public boolean remountSystem(String option){
		String cmd="mount -o remount,"+option+" /system";
		try{
			int r=RootUtil.runWithResult(cmd,null);
			return r==0;
		}
		catch(Exception e){
			Log.e("Prop.remount", e.getMessage(),e);
		}
		return false;
	}
	
	public boolean restore(){
		File filesDir = this.context.getFilesDir();
		File bakFile = new File(filesDir, PROP_NAME);
		if(bakFile.exists()){
			try
			{
				remountSystem("rw");				
				int exitCode = RootUtil.runWithResult("cat " + bakFile.getPath() + " > " + PROP_PATH, null, false);
				RootUtil.run("chmod 0644 "+PROP_PATH);
				RootUtil.run("chown root.root "+PROP_PATH);
				return exitCode==0;
			}
			catch (Exception e)
			{
				Log.e("Prop.restore",e.getMessage(),e);
			}
			finally
			{
				remountSystem("ro");
			}
		}
		return false;
	}
	public void setDisplaySoftButtons(boolean display)
	{
		keys.add("qemu.hw.mainkeys");
		this.properties.setProperty("qemu.hw.mainkeys", display?"0":"1");
	}
	
	public boolean isDisplaySoftButtons()
	{
		String value = this.properties.getProperty("qemu.hw.mainkeys");
		return "0".equals(value);
	}
	
	public void setDPI(int dpi)
	{
		keys.add("ro.sf.lcd_density");
		this.properties.setProperty("ro.sf.lcd_density", String.valueOf(dpi));
	}
	
	public int getDPI()
	{
		String dpiValue = this.properties.getProperty("ro.sf.lcd_density");
		try {
			return Integer.valueOf(dpiValue);
		}
		catch(Throwable ex){
			
		}
		return 240;
	}
	
	public String get(String key)
	{
		return this.properties.getProperty(key);
	}
	
	public void set(String key, String val)
	{
		this.keys.add(key);
		this.properties.put(key, val);
	}
	
	public boolean save() {
		File filesDir = context.getFilesDir();
		File backupFile = new File(filesDir, PROP_NAME);
		File tempFile = new File(filesDir, TEMP_PROP_NAME);
		BufferedReader reader = null;
		BufferedWriter writer = null;
		String line;
		try
		{
			Set<String> keys=new HashSet<String>();
			keys.addAll(this.keys);
			reader = new BufferedReader(new FileReader(backupFile));
			writer = new BufferedWriter(new FileWriter(tempFile));
			while ((line = reader.readLine()) != null)
			{
				line = line.trim();
				if (!line.startsWith("#"))
				{
					String[] parts = line.split("=");
					String key = parts[0].trim();
					if (keys.contains(key)) 
					{
						String val = this.properties.getProperty(key);
						if(val!=null)
							line = key + "=" + this.properties.getProperty(key);
						else 
							line = null;
						keys.remove(key);
					}
				}
				if(line!=null)
					writer.write(line);
				writer.write("\n");
			}
			for(String key:keys){
				line = key + "=" + this.properties.getProperty(key);
				writer.write(line);
				writer.write("\n");				
			}
		}
		catch (Exception e)
		{
			Log.e("unidevel",e.getMessage(),e);
			return false;
		}
		finally{
			try
			{
				reader.close();
			}
			catch (IOException e)
			{}
			try
			{
				writer.close();
			}
			catch (IOException e)
			{}
		}
		try
		{
			remountSystem("rw");
			int exitCode = RootUtil.runWithResult("cat " + tempFile.getPath() + " > " + PROP_PATH, null,false);
			RootUtil.run("chmod 0644 "+PROP_PATH);
			RootUtil.run("chown root.root "+PROP_PATH);
			return exitCode==0;
		}
		catch (Exception e)
		{
			Log.e("Prop.save", e.getMessage(),e);
		}
		finally
		{
			remountSystem("ro");
		}
		return false;
	}
	
	public void reset() throws Exception {
		File filesDir = context.getFilesDir();
		File backupFile = new File(filesDir, PROP_NAME);
		int exitCode = RootUtil.runWithResult("cp "+backupFile.getPath()+" "+PROP_PATH, null);
		if ( exitCode != 0 )
		{
			throw new Exception("Can't copy file to /system/build.prop");
		}		
	}
	
	public boolean reboot(){
		try
		{
			int r= RootUtil.runWithResult("reboot",null);
			return r==0;
		}
		catch (Exception e)
		{
			Log.e("Prop.reboot", e.getMessage(),e);
		}
		return false;
	}
}
